import{_ as e,c as i,o as s,a as l}from"./app.4d7dcf0a.js";const u=JSON.parse('{"title":"网格 Meshes","description":"","frontmatter":{},"headers":[{"level":2,"title":"网格","slug":"网格","link":"#网格","children":[{"level":3,"title":"创建内置模型 mesh_create_set_shapes","slug":"mesh-create-set-shapes","link":"#mesh-create-set-shapes","children":[]},{"level":3,"title":"网格属性 mesh_properties_accessors","slug":"mesh-properties-accessors","link":"#mesh-properties-accessors","children":[]},{"level":3,"title":"克隆网格 clone_mesh","slug":"clone-mesh","link":"#clone-mesh","children":[]},{"level":3,"title":"创建网格实例 mesh_create_instance","slug":"mesh-create-instance","link":"#mesh-create-instance","children":[]},{"level":3,"title":"合并网格 merge_meshes","slug":"merge-meshes","link":"#merge-meshes","children":[]},{"level":3,"title":"设置网格父级 mesh_set_parent","slug":"mesh-set-parent","link":"#mesh-set-parent","children":[]},{"level":3,"title":"渲染边 mesh_render_edges","slug":"mesh-render-edges","link":"#mesh-render-edges","children":[]},{"level":3,"title":"销毁网格 dispose_mesh","slug":"dispose-mesh","link":"#dispose-mesh","children":[]}]},{"level":2,"title":"变换","slug":"变换","link":"#变换","children":[{"level":3,"title":"变换属性 set_get_mesh_transform","slug":"set-get-mesh-transform","link":"#set-get-mesh-transform","children":[]},{"level":3,"title":"变换网格 translate_mesh","slug":"translate-mesh","link":"#translate-mesh","children":[]},{"level":3,"title":"碰撞移动 move_mesh_with_collisions","slug":"move-mesh-with-collisions","link":"#move-mesh-with-collisions","children":[]},{"level":3,"title":"旋转网格 rotate_mesh","slug":"rotate-mesh","link":"#rotate-mesh","children":[]},{"level":3,"title":"POV旋转网格 rotate_mesh_pov","slug":"rotate-mesh-pov","link":"#rotate-mesh-pov","children":[]},{"level":3,"title":"设置网格方向 set_mesh_direction","slug":"set-mesh-direction","link":"#set-mesh-direction","children":[]},{"level":3,"title":"获取网格方向 get_mesh_direction","slug":"get-mesh-direction","link":"#get-mesh-direction","children":[]},{"level":3,"title":"网格面向 mesh_look_at","slug":"mesh-look-at","link":"#mesh-look-at","children":[]},{"level":3,"title":"拖拽网格 drag_mesh","slug":"drag-mesh","link":"#drag-mesh","children":[]}]},{"level":2,"title":"检测","slug":"检测","link":"#检测","children":[{"level":3,"title":"检测点 check_point_behind_mesh","slug":"check-point-behind-mesh","link":"#check-point-behind-mesh","children":[]},{"level":3,"title":"检测网格相交 check_intersects_mesh","slug":"check-intersects-mesh","link":"#check-intersects-mesh","children":[]},{"level":3,"title":"检测点相交 check_intersects_point","slug":"check-intersects-point","link":"#check-intersects-point","children":[]}]},{"level":2,"title":"LOD","slug":"lod","link":"#lod","children":[{"level":3,"title":"添加LOD等级 mesh_add_lod_level","slug":"mesh-add-lod-level","link":"#mesh-add-lod-level","children":[]},{"level":3,"title":"自动LOD mesh_auto_lod","slug":"mesh-auto-lod","link":"#mesh-auto-lod","children":[]}]}],"relativePath":"block3d/blocks-reference/meshes.md"}'),h={name:"block3d/blocks-reference/meshes.md"},a=l('<h1 id="网格-meshes" tabindex="-1">网格 Meshes <a class="header-anchor" href="#网格-meshes" aria-hidden="true">#</a></h1><p>该分类包含创建和操作网格的方法。</p><nav class="table-of-contents"><ul><li><a href="#网格">网格</a><ul><li><a href="#mesh-create-set-shapes">创建内置模型 mesh_create_set_shapes</a></li><li><a href="#mesh-properties-accessors">网格属性 mesh_properties_accessors</a></li><li><a href="#clone-mesh">克隆网格 clone_mesh</a></li><li><a href="#mesh-create-instance">创建网格实例 mesh_create_instance</a></li><li><a href="#merge-meshes">合并网格 merge_meshes</a></li><li><a href="#mesh-set-parent">设置网格父级 mesh_set_parent</a></li><li><a href="#mesh-render-edges">渲染边 mesh_render_edges</a></li><li><a href="#dispose-mesh">销毁网格 dispose_mesh</a></li></ul></li><li><a href="#变换">变换</a><ul><li><a href="#set-get-mesh-transform">变换属性 set_get_mesh_transform</a></li><li><a href="#translate-mesh">变换网格 translate_mesh</a></li><li><a href="#move-mesh-with-collisions">碰撞移动 move_mesh_with_collisions</a></li><li><a href="#rotate-mesh">旋转网格 rotate_mesh</a></li><li><a href="#rotate-mesh-pov">POV旋转网格 rotate_mesh_pov</a></li><li><a href="#set-mesh-direction">设置网格方向 set_mesh_direction</a></li><li><a href="#get-mesh-direction">获取网格方向 get_mesh_direction</a></li><li><a href="#mesh-look-at">网格面向 mesh_look_at</a></li><li><a href="#drag-mesh">拖拽网格 drag_mesh</a></li></ul></li><li><a href="#检测">检测</a><ul><li><a href="#check-point-behind-mesh">检测点 check_point_behind_mesh</a></li><li><a href="#check-intersects-mesh">检测网格相交 check_intersects_mesh</a></li><li><a href="#check-intersects-point">检测点相交 check_intersects_point</a></li></ul></li><li><a href="#lod">LOD</a><ul><li><a href="#mesh-add-lod-level">添加LOD等级 mesh_add_lod_level</a></li><li><a href="#mesh-auto-lod">自动LOD mesh_auto_lod</a></li></ul></li></ul></nav><h2 id="网格" tabindex="-1">网格 <a class="header-anchor" href="#网格" aria-hidden="true">#</a></h2><h3 id="mesh-create-set-shapes" tabindex="-1">创建内置模型 mesh_create_set_shapes <a class="header-anchor" href="#mesh-create-set-shapes" aria-hidden="true">#</a></h3><p>该拼图用于创建基本的几何体网格，包括：立方体、球体、圆柱体、平面，以及直线等等。创建出来的网格会有一个默认的PBR材质。使用该拼图可以帮你快速搭建场景。</p><ul><li><code>名字</code>参数可以帮助你在场景查看器中快速找到网格。</li><li><code>选项</code>接收一个对象类型的参数，用于控制网格的属性，这些属性根据网格类型而不尽相同。你可以通过在该拼图的右键菜单中执行<code>创建 选项</code>获取属性拼图。</li></ul><h3 id="mesh-properties-accessors" tabindex="-1">网格属性 mesh_properties_accessors <a class="header-anchor" href="#mesh-properties-accessors" aria-hidden="true">#</a></h3><p>用于设置或获取网格属性或状态。访问器是访问对象属性时触发的回调函数，用于设置或获取对象的内部数据，用法与属性相同，在拼图中表示为&quot;属性*&quot;</p><p>属性：</p><ul><li>边颜色：edgesColor - 当边渲染开启时，定义边的颜色</li><li>与实例共享边：edgesShareWithInstances - 当为真时，对所有网格实例应用边渲染</li><li>边宽度：edgesWidth - 当边渲染开启时，定义边的宽度</li><li>椭圆体：ellipsoid - 使用碰撞引擎时，获取或设置用于模拟此网格的椭圆球体</li><li>椭圆体偏移：ellipsoidOffset - 使用碰撞引擎时，获取或设置用于模拟此网格的椭圆球体的偏移</li><li>可拾取：isPickable - 设置或获取网格是否可拾取</li><li>可显示：isVisible - 设置或获取网格是否可见（可渲染）</li><li>当碰撞时：onCollideObservable - 当与其它网格碰撞时触发此事件</li><li>当碰撞位置改变时：onCollisionPositionChangeObservable - 当碰撞位置发生改变时触发此事件</li><li>当销毁时：onDisposeObservable -当网格销毁时触发时此事件</li><li>描边颜色：outlineColor - 当渲染描边时，定义颜色值</li><li>描边宽度：outlineWidth - 当渲染描边时，定义描边宽度</li><li>覆盖层不透明度：overlayAlpha - 当渲染覆盖层时，定义不透明度</li><li>覆盖层颜色：overlayColor - 当渲染覆盖层时，定义颜色值</li><li>渲染描边：renderOutline - 设置或获取是否同时渲染描边</li><li>渲染覆盖层：renderOverlay - 设置或获取是否同时渲染覆盖层</li><li>显示边界盒：showBoundingBox - 设置或获取是否同时渲染边界盒</li></ul><p>访问器：</p><ul><li>公告牌模式：billboardMode - 设置或获取公告牌模式 0 无 1 锁定X 2 锁定Y 4 锁定Z 7 锁定全部</li><li>检测碰撞：checkCollisions - 设置或获取网格是否可用于碰撞引擎</li><li>图层蒙板：layerMask - 设置或获取当前图层蒙板。默认0FFFFFFF</li><li>材质：material - 设置或获取材质</li><li>接收阴影：receiveShadows - 设置或获取此网格是否接收实时阴影</li><li>可见度：visibility - 在0到1之间设置或获取网格可见度</li></ul><h3 id="clone-mesh" tabindex="-1">克隆网格 clone_mesh <a class="header-anchor" href="#clone-mesh" aria-hidden="true">#</a></h3><p>复制当前网格的属性，生成一个新的独立的网格物体。</p><h3 id="mesh-create-instance" tabindex="-1">创建网格实例 mesh_create_instance <a class="header-anchor" href="#mesh-create-instance" aria-hidden="true">#</a></h3><p>从当前网格创建一个新的网格实例。实例网格拥有独立的变换属性，其它属性与原网格共享。例如，所有的实例网格都共享一个材质。</p><h3 id="merge-meshes" tabindex="-1">合并网格 merge_meshes <a class="header-anchor" href="#merge-meshes" aria-hidden="true">#</a></h3><p>出于优化性能的目的，将数组中的网格合并成一个网格。</p><h3 id="mesh-set-parent" tabindex="-1">设置网格父级 mesh_set_parent <a class="header-anchor" href="#mesh-set-parent" aria-hidden="true">#</a></h3><p>设置网格的父物体。该拼图与节点分类下的<a href="./nodes.html#node-parent">node_parent</a>拼图的不同之处在于，该拼图会保持子物体的在当前场景中的位置。</p><h3 id="mesh-render-edges" tabindex="-1">渲染边 mesh_render_edges <a class="header-anchor" href="#mesh-render-edges" aria-hidden="true">#</a></h3><p>为当前网格启用边线渲染模式。此模式可将网格的边线渲染出来。配合网格<code>边宽度</code> <code>边颜色</code>属性，可设置连线的线宽和颜色。</p><p>参数：</p><ul><li>系数 - 定义检测一个面的两个角度的最大距离，默认值<code>0.95</code></li></ul><h3 id="dispose-mesh" tabindex="-1">销毁网格 dispose_mesh <a class="header-anchor" href="#dispose-mesh" aria-hidden="true">#</a></h3><p>销毁网格，删除与该网格关联的资源。</p><p>参数：</p><ul><li>含子级 - 销毁该网格的子级</li><li>含材质纹理 - 销毁该网格的材质和纹理</li></ul><h2 id="变换" tabindex="-1">变换 <a class="header-anchor" href="#变换" aria-hidden="true">#</a></h2><h3 id="set-get-mesh-transform" tabindex="-1">变换属性 set_get_mesh_transform <a class="header-anchor" href="#set-get-mesh-transform" aria-hidden="true">#</a></h3><p>用于设置或获取网格的变换属性。</p><h3 id="translate-mesh" tabindex="-1">变换网格 translate_mesh <a class="header-anchor" href="#translate-mesh" aria-hidden="true">#</a></h3><p>在局部空间或世界空间移动网格。</p><p>参数：</p><ul><li>网格 - 要移动的网格</li><li>轴 - 定义网格要沿哪个轴移动</li><li>距离 - 移动的距离</li><li>局部 - 勾选使用局部空间，否则使用世界空间</li></ul><h3 id="move-mesh-with-collisions" tabindex="-1">碰撞移动 move_mesh_with_collisions <a class="header-anchor" href="#move-mesh-with-collisions" aria-hidden="true">#</a></h3><p>使用碰撞引擎移动网格。意味着网格在移动时带有碰撞属性。</p><h3 id="rotate-mesh" tabindex="-1">旋转网格 rotate_mesh <a class="header-anchor" href="#rotate-mesh" aria-hidden="true">#</a></h3><p>在局部空间或世界空间旋转网格。</p><p>参数：</p><ul><li>网格 - 要移动的网格</li><li>轴 - 定义网格要沿哪个轴旋转</li><li>角度 - 旋转的角度</li><li>局部 - 勾选使用局部空间，否则使用世界空间</li></ul><h3 id="rotate-mesh-pov" tabindex="-1">POV旋转网格 rotate_mesh_pov <a class="header-anchor" href="#rotate-mesh-pov" aria-hidden="true">#</a></h3><p>以POV模式旋转网格。</p><p>参数：</p><ul><li>网格 - 要移动的网格</li><li>俯仰 - 俯仰角度</li><li>偏航 - 偏航角度</li><li>旋转 - 旋转角度</li></ul><h3 id="set-mesh-direction" tabindex="-1">设置网格方向 set_mesh_direction <a class="header-anchor" href="#set-mesh-direction" aria-hidden="true">#</a></h3><p>将此变换节点的旋转设置为给定的局部坐标轴。</p><h3 id="get-mesh-direction" tabindex="-1">获取网格方向 get_mesh_direction <a class="header-anchor" href="#get-mesh-direction" aria-hidden="true">#</a></h3><p>返回一个世界坐标空间的向量3，这个向量3是局部轴（在局部坐标空间下）旋转的结果。</p><ul><li>轴：旋转的轴</li></ul><h3 id="mesh-look-at" tabindex="-1">网格面向 mesh_look_at <a class="header-anchor" href="#mesh-look-at" aria-hidden="true">#</a></h3><p>旋转网格使它朝向目标点。</p><h3 id="drag-mesh" tabindex="-1">拖拽网格 drag_mesh <a class="header-anchor" href="#drag-mesh" aria-hidden="true">#</a></h3><p>使一个网格可以被拖拽。<code>options</code>接收一个对象参数，用于控制拖拽行为，通过该拼图的右键菜单-<code>创建 option</code>，可创建属性拼图。这些属性包括：</p><ul><li>拖拽轴 dragAxis - 拖拽模式，使网格沿指定的轴拖拽。如果未指定，则拖拽平面面向相机</li><li>拖拽面法线 dragPlaneNormal - 拖拽模式，使网格沿指定的平面拖拽，通过法线确定。</li><li>启用 enabled - 是否可拖拽</li><li>移动附加物体 moveAttached - 当拖拽时，网格是否移动。若为<code>false</code>网格会静止不动</li><li>更新拖拽面 updateDragPlane - 是否在拖拽过程中应更新拖拽平面的方向（默认：<code>true</code>）。</li><li>使用物体坐标拖拽 useObjectOrientationForDragging - 如果设置为<code>false</code>网格将以世界坐标拖拽（默认：<code>true</code>）</li></ul><p>通过拼图左上角的高级选项，可以启用开始拖拽、拖拽和拖拽结束3种状态的回调插槽。</p><h2 id="检测" tabindex="-1">检测 <a class="header-anchor" href="#检测" aria-hidden="true">#</a></h2><h3 id="check-point-behind-mesh" tabindex="-1">检测点 check_point_behind_mesh <a class="header-anchor" href="#check-point-behind-mesh" aria-hidden="true">#</a></h3><p>检查场景中的某个点是否被网格遮挡。</p><h3 id="check-intersects-mesh" tabindex="-1">检测网格相交 check_intersects_mesh <a class="header-anchor" href="#check-intersects-mesh" aria-hidden="true">#</a></h3><p>检查两个网格是否相交。</p><p>参数：</p><ul><li>精确 - 高精确检测</li><li>含子级 - 是否包含子级</li></ul><h3 id="check-intersects-point" tabindex="-1">检测点相交 check_intersects_point <a class="header-anchor" href="#check-intersects-point" aria-hidden="true">#</a></h3><p>检查场景中的某个点是否位于网格内部。</p><h2 id="lod" tabindex="-1">LOD <a class="header-anchor" href="#lod" aria-hidden="true">#</a></h2><h3 id="mesh-add-lod-level" tabindex="-1">添加LOD等级 mesh_add_lod_level <a class="header-anchor" href="#mesh-add-lod-level" aria-hidden="true">#</a></h3><p>根据距离为网格添加LOD网格。也就是，网格会根据距离显示不同的精度，这有利用提高性能。</p><h3 id="mesh-auto-lod" tabindex="-1">自动LOD mesh_auto_lod <a class="header-anchor" href="#mesh-auto-lod" aria-hidden="true">#</a></h3><p>根据给定的设置自动简化网格。</p><p>参数<code>设置</code>接收一个数组参数，数组的项是一个对象，对象可用的键值有：</p><ul><li>品质 - 网格质量 0-1</li><li>距离 - 显示距离</li><li>优化网格 - 是否优化网格</li></ul>',73),t=[a];function r(d,n,o,c,m,_){return s(),i("div",null,t)}const g=e(h,[["render",r]]);export{u as __pageData,g as default};
