import { DropdownHelper } from '../util/util'

const MenuGenerator = {};

MenuGenerator.materialType = new DropdownHelper([
  ['StandardMaterial', 'StandardMaterial'],
  ['PBRMaterial', 'PBRMaterial'],
  ['BackgroundMaterial', 'BackgroundMaterial'],
])

const alpha = ['alpha', 'alpha', 'NUM', '1', 'Sets or gets the alpha value of the material'],
  alphaMode = ['alphaMode', 'alphaMode', 'NUM', '', '0	ALPHA_DISABLE	\n 1	ALPHA_ADD	\n 2	ALPHA_COMBINE	\n 3	ALPHA_SUBTRACT	\n 4	ALPHA_MULTIPLY	\n 5	ALPHA_MAXIMIZED	\n 6	ALPHA_ONEONE	\n 7	ALPHA_PREMULTIPLIED	\n 8	ALPHA_PREMULTIPLIED_PORTERDUFF	\n 9	ALPHA_INTERPOLATE	\n 10	ALPHA_SCREENMODE'],
  ambientColor = ['ambientColor', 'ambientColor', 'COLOR3', [0, 0, 0], 'The color of the material lit by the environmental background lighting.'],
  ambientTexture = ['ambientTexture', 'ambientTexture', 'NONE', '', 'AKA Occlusion Texture in other nomenclature, it helps adding baked shadows into your material.'],
  transparencyMode = ['transparencyMode', 'transparencyMode', 'NUM', '0', '0	OPAQUE	\n1	ALPHATEST	\n2	ALPHABLEND	\n3	ALPHATESTANDBLEND'],

  zOffset = ['zOffset', 'zOffset', 'NUM', '', 'Stores the z offset Factor value'];

MenuGenerator.StandardMaterial = new DropdownHelper([
  alpha,
  alphaMode,
  ambientColor,
  ambientTexture,
  ['backFaceCulling', 'backFaceCulling', 'BOOL', 'FALSE', 'Sets or gets the culling state (true to enable culling, false to disable)'],
  ['bumpTexture', 'bumpTexture', 'NONE', '', 'Bump mapping is a technique to simulate bump and dents on a rendered surface.'],
  ['diffuseColor', 'diffuseColor', 'COLOR3', [0, 0, 0], 'The basic color of the material as viewed under a light.'],
  ['diffuseTexture', 'diffuseTexture', 'NONE', '', 'The basic texture of the material as viewed under a light.'],
  ['disableLighting', 'disableLighting', 'BOOL', 'FALSE', 'Does lights from the scene impacts this material. It can be a nice trick for performance to disable lighting on a fully emissive material.'],
  ['emissiveColor', 'emissiveColor', 'COLOR3', [0, 0, 0], 'Define the color of the material as if self lit. This will be mixed in the final result even in the absence of light.'],
  ['emissiveTexture', 'emissiveTexture', 'NONE', '', 'Define texture of the material as if self lit. This will be mixed in the final result even in the absence of light.'],
  ['indexOfRefraction', 'indexOfRefraction', 'NUM', '1', 'In case of refraction, define the value of the index of refraction.'],
  ['invertNormalMapX', 'invertNormalMapX', 'BOOL', 'FALSE', 'If sets to true, x component of normal map value will invert (x = 1.0 - x).'],
  ['invertNormalMapY', 'invertNormalMapY', 'BOOL', 'FALSE', 'If sets to true, y component of normal map value will invert (y = 1.0 - y).'],
  ['invertRefractionY', 'invertRefractionY', 'BOOL', 'FALSE', 'Invert the refraction texture alongside the y axis. It can be useful with procedural textures or probe for instance.'],
  ['lightmapTexture', 'lightmapTexture', 'NONE', '', 'Complex lighting can be computationally expensive to compute at runtime. To save on computation, lightmaps may be used to store calculated lighting in a texture which will be applied to a given mesh.'],
  ['linkEmissiveWithDiffuse', 'linkEmissiveWithDiffuse', 'BOOL', 'FALSE', 'If true, some kind of energy conservation will prevent the end result to be more than 1 by reducing the emissive level when the final color is close to one.'],
  ['maxSimultaneousLights', 'maxSimultaneousLights', 'NUM', '6', 'Defines the maximum number of lights that can be used in the material'],
  ['opacityTexture', 'opacityTexture', 'NONE', '', 'Define the transparency of the material from a texture. The final alpha value can be read either from the red channel (if texture.getAlphaFromRGB is false) or from the luminance or the current texel (if texture.getAlphaFromRGB is true)'],
  ['parallaxScaleBias', 'parallaxScaleBias', 'NUM', '0.05', 'Apply a scaling factor that determine which "depth" the height map should reprensent. A value between 0.05 and 0.1 is reasonnable in Parallax, you can reach 0.2 using Parallax Occlusion.'],
  ['pointSize', 'pointSize', 'NUM', '1', 'Stores the size of points'],
  ['reflectionTexture', 'reflectionTexture', 'NONE', '', 'Define the texture used to display the reflection.'],
  ['refractionTexture', 'refractionTexture', 'NONE', '', 'Define the texture used to display the refraction.'],
  ['roughness', 'roughness', 'Number', 'NUM', '0'],
  ['sideOrientation', 'sideOrientation', 'NUM', '0', 'Stores the value for side orientation'],
  ['specularColor', 'specularColor', 'COLOR3', [0, 0, 0], 'Define how the color and intensity of the highlight given by the light in the material.'],
  ['specularPower', 'specularPower', 'NUM', '1', 'Defines how sharp are the highlights in the material. The bigger the value the sharper giving a more glossy feeling to the result. Reversely, the smaller the value the blurrier giving a more rough feeling to the result.'],
  ['specularTexture', 'specularTexture', 'NONE', '', 'Define how the color and intensity of the highlight given by the light in the material.'],
  transparencyMode,
  ['twoSidedLighting', 'twoSidedLighting', 'BOOL', 'FALSE', 'If sets to true and backfaceCulling is false, normals will be flipped on the backside.'],
  ['useAlphaFromDiffuseTexture', 'useAlphaFromDiffuseTexture', 'BOOL', 'FALSE', 'Does the transparency come from the diffuse texture alpha channel.'],
  ['useEmissiveAsIllumination', 'useEmissiveAsIllumination', 'BOOL', 'FALSE', 'If true, the emissive value is added into the end result, otherwise it is multiplied in.'],
  ['useGlossinessFromSpecularMapAlpha', 'useGlossinessFromSpecularMapAlpha', 'BOOL', 'FALSE', 'Defines if the glossiness/roughness of the material should be read from the specular map alpha channel'],
  ['useLightmapAsShadowmap', 'useLightmapAsShadowmap', 'BOOL', 'FALSE', 'In case of light mapping, define whether the map contains light or shadow informations.'],
  ['useObjectSpaceNormalMap', 'useObjectSpaceNormalMap', 'BOOL', 'FALSE', 'Allows using an object space normal map (instead of tangent space).'],
  ['useParallax', 'useParallax', 'BOOL', 'FALSE', 'Is parallax enabled or not.'],
  ['useParallaxOcclusion', 'useParallaxOcclusion', 'BOOL', 'FALSE', 'Is parallax occlusion enabled or not. If true, the outcome is way more realistic than traditional Parallax but you can expect a performance hit that worthes consideration.'],
  ['useReflectionFresnelFromSpecular', 'useReflectionFresnelFromSpecular', 'BOOL', 'FALSE', 'If true automatically deducts the fresnels values from the material specularity.'],
  ['useReflectionOverAlpha', 'useReflectionOverAlpha', 'BOOL', 'FALSE', 'Specifies that the material will keeps the reflection highlights over a transparent surface (only the most luminous ones). A car glass is a good exemple of that. When the street lights reflects on it you can not see what is behind.'],
  ['useSpecularOverAlpha', 'useSpecularOverAlpha', 'BOOL', 'FALSE', 'Specifies that the material will keep the specular highlights over a transparent surface (only the most luminous ones). A car glass is a good exemple of that. When sun reflects on it you can not see what is behind.'],
  ['wireframe', 'wireframe', 'BOOL', 'FALSE', 'Sets or gets the state of wireframe mode'],
  zOffset,
])

MenuGenerator.PBRMaterial = new DropdownHelper([
  ['albedoColor', 'albedoColor', 'COLOR3', [255, 255, 255], 'AKA Diffuse Color in other nomenclature.'],
  ['albedoTexture', 'albedoTexture', null, '', 'AKA Diffuse Texture in standard nomenclature.'],
  ['allowShaderHotSwapping', 'allowShaderHotSwapping', 'BOOL', 'TRUE', 'Gets or sets a boolean indicating that the material is allowed (if supported) to do shader hot swapping.This means that the material can keep using a previous shader while a new one is being compiled.This is mostly used when shader parallel compilation is supported (true by default)'],
  alpha,
  alphaMode,
  ['alphaCutOff', 'alphaCutOff', 'NUM', '', 'Defines the alpha limits in alpha test mode.'],
  ambientColor,
  ambientTexture,
  ['ambientTextureImpactOnAnalyticalLights', 'ambientTextureImpactOnAnalyticalLights', null, '', ''],
  ['ambientTextureStrength', 'ambientTextureStrength', 'NUM', '', ''],
  ['animations', 'animations', 'NONE', '', 'Stores the animations for the material'],
  ['anisotropy', 'anisotropy', null, '', ''],
  ['brdf', 'brdf', null, '', ''],
  ['bumpTexture', 'bumpTexture', null, '', ''],
  ['checkReadyOnEveryCall', 'checkReadyOnEveryCall', null, '', ''],
  ['checkReadyOnlyOnce', 'checkReadyOnlyOnce', null, '', ''],
  ['clearCoat', 'clearCoat', null, '', ''],
  ['customShaderNameResolve', 'customShaderNameResolve', null, '', ''],
  ['depthFunction', 'depthFunction', null, '', ''],
  ['detailMap', 'detailMap', null, '', ''],
  ['directIntensity', 'directIntensity', null, '', ''],
  ['disableBumpMap', 'disableBumpMap', null, '', ''],
  ['disableColorWrite', 'disableColorWrite', null, '', ''],
  ['disableDepthWrite', 'disableDepthWrite', null, '', ''],
  ['disableLighting', 'disableLighting', null, '', ''],
  ['doNotSerialize', 'doNotSerialize', null, '', ''],
  ['emissiveColor', 'emissiveColor', 'COLOR3', [0, 0, 0], ''],
  ['emissiveIntensity', 'emissiveIntensity', null, '', ''],
  ['emissiveTexture', 'emissiveTexture', null, '', ''],
  ['enableSpecularAntiAliasing', 'enableSpecularAntiAliasing', null, '', ''],
  ['environmentBRDFTexture', 'environmentBRDFTexture', null, '', ''],
  ['environmentIntensity', 'environmentIntensity', null, '', ''],
  ['forceAlphaTest', 'forceAlphaTest', null, '', ''],
  ['forceDepthWrite', 'forceDepthWrite', null, '', ''],
  ['forceIrradianceInFragment', 'forceIrradianceInFragment', null, '', ''],
  ['forceNormalForward', 'forceNormalForward', null, '', ''],
  ['getRenderTargetTextures', 'getRenderTargetTextures', null, '', ''],
  ['inspectableCustomProperties', 'inspectableCustomProperties', null, '', ''],
  ['invertNormalMapX', 'invertNormalMapX', null, '', ''],
  ['invertNormalMapY', 'invertNormalMapY', null, '', ''],
  ['lightmapTexture', 'lightmapTexture', null, '', ''],
  ['maxSimultaneousLights', 'maxSimultaneousLights', null, '', ''],
  ['metadata', 'metadata', null, '', ''],
  ['metallic', 'metallic', null, '', ''],
  ['metallicF0Factor', 'metallicF0Factor', null, '', ''],
  ['metallicReflectanceColor', 'metallicReflectanceColor', null, '', ''],
  ['metallicReflectanceTexture', 'metallicReflectanceTexture', null, '', ''],
  ['metallicTexture', 'metallicTexture', null, '', ''],
  ['microSurface', 'microSurface', null, '', ''],
  ['microSurfaceTexture', 'microSurfaceTexture', null, '', ''],
  ['opacityTexture', 'opacityTexture', null, '', ''],
  ['parallaxScaleBias', 'parallaxScaleBias', null, '', ''],
  ['pointSize', 'pointSize', null, '', ''],
  ['prePassConfiguration', 'prePassConfiguration', null, '', ''],
  ['reflectanceTexture', 'reflectanceTexture', null, '', ''],
  ['reflectionColor', 'reflectionColor', null, '', ''],
  ['reflectionTexture', 'reflectionTexture', null, '', ''],
  ['reflectivityColor', 'reflectivityColor', null, '', ''],
  ['reflectivityTexture', 'reflectivityTexture', null, '', ''],
  ['reservedDataStore', 'reservedDataStore', null, '', ''],
  ['roughness', 'roughness', 'NUM', '', ''],
  ['separateCullingPass', 'separateCullingPass', null, '', ''],
  ['shadowDepthWrapper', 'shadowDepthWrapper', null, '', ''],
  ['sheen', 'sheen', null, '', ''],
  ['sideOrientation', 'sideOrientation', 'NUM', '', 'Stores the value for side orientation'],
  ['specularIntensity', 'specularIntensity', null, '', ''],
  ['state', 'state', null, '', ''],
  ['subSurface', 'subSurface', null, '', ''],
  ['twoSidedLighting', 'twoSidedLighting', null, '', ''],
  transparencyMode,
  ['unlit', 'unlit', 'BOOL', 'FALSE', 'If set to true, no lighting calculations will be applied.'],
  ['useAlphaFresnel', 'useAlphaFresnel', null, '', ''],
  ['useAlphaFromAlbedoTexture', 'useAlphaFromAlbedoTexture', null, '', ''],
  ['useAmbientInGrayScale', 'useAmbientInGrayScale', null, '', ''],
  ['useAmbientOcclusionFromMetallicTextureRed', 'useAmbientOcclusionFromMetallicTextureRed', null, '', ''],
  ['useAutoMicroSurfaceFromReflectivityMap', 'useAutoMicroSurfaceFromReflectivityMap', null, '', ''],
  ['useHorizonOcclusion', 'useHorizonOcclusion', null, '', ''],
  ['useLightmapAsShadowmap', 'useLightmapAsShadowmap', null, '', ''],
  ['useLinearAlphaFresnel', 'useLinearAlphaFresnel', null, '', ''],
  ['useMetallnessFromMetallicTextureBlue', 'useMetallnessFromMetallicTextureBlue', null, '', ''],
  ['useMicroSurfaceFromReflectivityMapAlpha', 'useMicroSurfaceFromReflectivityMapAlpha', null, '', ''],
  ['useObjectSpaceNormalMap', 'useObjectSpaceNormalMap', null, '', ''],
  ['useOnlyMetallicFromMetallicReflectanceTexture', 'useOnlyMetallicFromMetallicReflectanceTexture', null, '', ''],
  ['useParallax', 'useParallax', null, '', ''],
  ['useParallaxOcclusion', 'useParallaxOcclusion', null, '', ''],
  ['useRadianceOcclusion', 'useRadianceOcclusion', null, '', ''],
  ['useRadianceOverAlpha', 'useRadianceOverAlpha', null, '', ''],
  ['useRoughnessFromMetallicTextureAlpha', 'useRoughnessFromMetallicTextureAlpha', null, '', ''],
  ['useRoughnessFromMetallicTextureGreen', 'useRoughnessFromMetallicTextureGreen', null, '', ''],
  ['useSpecularOverAlpha', 'useSpecularOverAlpha', null, '', ''],
])

MenuGenerator.BackgroundMaterial = new DropdownHelper([
  ['allowShaderHotSwapping', 'allowShaderHotSwapping', null, '', ''],
  ['animations', 'animations', null, '', ''],
  ['checkReadyOnEveryCall', 'checkReadyOnEveryCall', null, '', ''],
  ['checkReadyOnlyOnce', 'checkReadyOnlyOnce', null, '', ''],
  ['customShaderNameResolve', 'customShaderNameResolve', null, '', ''],
  ['depthFunction', 'depthFunction', null, '', ''],
  ['diffuseTexture', 'diffuseTexture', null, '', ''],
  ['disableColorWrite', 'disableColorWrite', null, '', ''],
  ['disableDepthWrite', 'disableDepthWrite', null, '', ''],
  ['doNotSerialize', 'doNotSerialize', null, '', ''],
  ['enableNoise', 'enableNoise', null, '', ''],
  ['forceDepthWrite', 'forceDepthWrite', null, '', ''],
  ['getRenderTargetTextures', 'getRenderTargetTextures', null, '', ''],
  ['id', 'id', null, '', ''],
  ['inspectableCustomProperties', 'inspectableCustomProperties', null, '', ''],
  ['maxSimultaneousLights', 'maxSimultaneousLights', null, '', ''],
  ['metadata', 'metadata', null, '', ''],
  ['name', 'name', null, '', ''],
  ['onCompiled', 'onCompiled', null, '', ''],
  ['onDisposeObservable', 'onDisposeObservable', null, '', ''],
  ['onError', 'onError', null, '', ''],
  ['opacityFresnel', 'opacityFresnel', null, '', ''],
  ['pointSize', 'pointSize', null, '', ''],
  ['primaryColor', 'primaryColor', 'COLOR3', [255, 255, 255], ''],
  ['reflectionAmount', 'reflectionAmount', null, '', ''],
  ['reflectionBlur', 'reflectionBlur', null, '', ''],
  ['reflectionFalloffDistance', 'reflectionFalloffDistance', null, '', ''],
  ['reflectionFresnel', 'reflectionFresnel', null, '', ''],
  ['reflectionReflectance0', 'reflectionReflectance0', null, '', ''],
  ['reflectionReflectance90', 'reflectionReflectance90', null, '', ''],
  ['reflectionTexture', 'reflectionTexture', null, '', ''],
  ['reservedDataStore', 'reservedDataStore', null, '', ''],
  ['sceneCenter', 'sceneCenter', null, '', ''],
  ['separateCullingPass', 'separateCullingPass', null, '', ''],
  ['shadowDepthWrapper', 'shadowDepthWrapper', null, '', ''],
  ['shadowLevel', 'shadowLevel', null, '', ''],
  ['shadowLights', 'shadowLights', null, '', ''],
  ['shadowOnly', 'shadowOnly', null, '', ''],
  ['sideOrientation', 'sideOrientation', null, '', ''],
  ['state', 'state', null, '', ''],
  ['switchToBGR', 'switchToBGR', null, '', ''],
  ['uniqueId', 'uniqueId', null, '', ''],
  ['useEquirectangularFOV', 'useEquirectangularFOV', null, '', ''],
  ['useRGBColor', 'useRGBColor', null, '', ''],
  zOffset,
  ['zOffsetUnits', 'zOffsetUnits', null, '', ''],
])

MenuGenerator.textureType = new DropdownHelper([
  ['Texture', 'Texture'],
  ['CubeTexture', 'CubeTexture'],
])
const anisotropicFilteringLevel = ['anisotropicFilteringLevel', 'anisotropicFilteringLevel', 'NUM', '4', 'With compliant hardware and browser (supporting anisotropic filtering)\nthis defines the level of anisotropic filtering in the texture.\nThe higher the better but the slower. This defaults to 4 as it seems to be the best tradeoff.'],
  coordinatesMode = ['coordinatesMode', 'coordinatesMode', 'NUM', '0', 'How a texture is mapped. \n0-EXPLICIT_MODE\n1-SPHERICAL_MODE\n2-PLANAR_MODE\n3-CUBIC_MODE\n4-PROJECTION_MODE\n5-SKYBOX_MODE\n6-INVCUBIC_MODE\n7-EQUIRECTANGULAR_MODE\n8-FIXED_EQUIRECTANGULAR_MODE\n9-FIXED_EQUIRECTANGULAR_MIRRORED_MODE'],
  hasAlpha = ['hasAlpha', 'hasAlpha', 'BOOL', 'FALSE', 'Define if the texture is having a usable alpha value (can be use for transparency or glossiness for instance).'],
  invertY = ['invertY', 'invertY', 'BOOL', 'FALSE', 'Gets a boolean indicating if the texture needs to be inverted on the y axis during loading'],
  invertZ = ['invertZ', 'invertZ', 'BOOL', 'FALSE', 'Is Z inverted in the texture (useful in a cube texture).'],
  level = ['level', 'level', 'NUM', '1', 'Intensity or strength of the texture.It is commonly used by materials to fine tune the intensity of the texture'],
  uAng = ['uAng', 'uAng', 'NUM', '0', 'Define an offset on the texture to rotate around the u coordinates of the UVs\nThe angle is defined in radians.'],
  uOffset = ['uOffset', 'uOffset', 'NUM', '0', 'Define an offset on the texture to offset the u coordinates of the UVs'],
  uRotationCenter = ['uRotationCenter', 'uRotationCenter', 'NUM', '0', 'Defines the center of rotation (U)'],
  uScale = ['uScale', 'uScale', 'NUM', '1', 'Define an offset on the texture to scale the u coordinates of the UVs'],
  rotationY = ['rotationY', 'rotationY', 'NUM', '', 'Sets or gets texture matrix rotation angle around Y axis in radians. '],
  url = ['url', 'url', 'TEXT', '', 'Define the url of the texture.'],
  vAng = ['vAng', 'vAng', 'NUM', '0', 'Define an offset on the texture to rotate around the v coordinates of the UVs\nThe angle is defined in radians.'],
  vOffset = ['vOffset', 'vOffset', 'NUM', '0', 'Define an offset on the texture to offset the v coordinates of the UVs'],
  vRotationCenter = ['vRotationCenter', 'vRotationCenter', 'NUM', '0', 'Defines the center of rotation (V)'],
  vScale = ['vScale', 'vScale', 'NUM', '1', 'Define an offset on the texture to scale the v coordinates of the UVs'],
  wAng = ['wAng', 'wAng', 'NUM', '0', 'Define an offset on the texture to rotate around the w coordinates of the UVs (in case of 3d texture)\nThe angle is defined in radians.'],
  wRotationCenter = ['wRotationCenter', 'wRotationCenter', 'NUM', '0', 'Defines the center of rotation (W)'],
  wrapR = ['wrapR', 'wrapR', 'NUM', '', '0-CLAMP_ADDRESSMODE\n1-WRAP_ADDRESSMODE\n2-MIRROR_ADDRESSMODE'],
  wrapU = ['wrapU', 'wrapU', 'NUM', '', '0-CLAMP_ADDRESSMODE\n1-WRAP_ADDRESSMODE\n2-MIRROR_ADDRESSMODE'],
  wrapV = ['wrapV', 'wrapV', 'NUM', '', '0-CLAMP_ADDRESSMODE\n1-WRAP_ADDRESSMODE\n2-MIRROR_ADDRESSMODE'];

MenuGenerator.Texture = new DropdownHelper([
  anisotropicFilteringLevel,
  coordinatesMode,
  hasAlpha,
  invertY,
  invertZ,
  level,
  uAng,
  uOffset,
  uRotationCenter,
  uScale,
  url,
  vAng,
  vOffset,
  vRotationCenter,
  vScale,
  wAng,
  wRotationCenter,
  wrapR,
  wrapU,
  wrapV,
])

MenuGenerator.CubeTexture = new DropdownHelper([
  anisotropicFilteringLevel,
  coordinatesMode,
  hasAlpha,
  invertZ,
  level,
  url,
  rotationY,
  wrapU,
  wrapV,
])

export default MenuGenerator