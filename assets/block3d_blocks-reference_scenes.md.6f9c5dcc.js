import{_ as e,c as l,o as i,a}from"./app.9d829298.js";const g=JSON.parse('{"title":"场景 Scenes","description":"","frontmatter":{},"headers":[{"level":2,"title":"场景","slug":"场景","link":"#场景","children":[{"level":3,"title":"场景属性 scene_properties_accessors","slug":"scene-properties-accessors","link":"#scene-properties-accessors","children":[]}]},{"level":2,"title":"环境","slug":"环境","link":"#环境","children":[{"level":3,"title":"简易环境 scene_create_easy_environment","slug":"scene-create-easy-environment","link":"#scene-create-easy-environment","children":[]},{"level":3,"title":"创建环境 scene_create_default_environment","slug":"scene-create-default-environment","link":"#scene-create-default-environment","children":[]},{"level":3,"title":"更新环境 scene_update_default_environment","slug":"scene-update-default-environment","link":"#scene-update-default-environment","children":[]},{"level":3,"title":"环境属性 scene_get_environment_prop","slug":"scene-get-environment-prop","link":"#scene-get-environment-prop","children":[]}]},{"level":2,"title":"资产","slug":"资产","link":"#资产","children":[{"level":3,"title":"创建加载界面 scene_create_loading_screen","slug":"scene-create-loading-screen","link":"#scene-create-loading-screen","children":[]},{"level":3,"title":"资产管理器 scene_assets_manager","slug":"scene-assets-manager","link":"#scene-assets-manager","children":[]},{"level":3,"title":"创建加载任务 scene_create_loading_task","slug":"scene-create-loading-task","link":"#scene-create-loading-task","children":[]},{"level":3,"title":"获取资产 scene_get_loaded_from_task","slug":"scene-get-loaded-from-task","link":"#scene-get-loaded-from-task","children":[]},{"level":3,"title":"容器方法 scene_asset_container_methods","slug":"scene-asset-container-methods","link":"#scene-asset-container-methods","children":[]}]},{"level":2,"title":"应用","slug":"应用","link":"#应用","children":[{"level":3,"title":"全屏 app_fullscreen","slug":"app-fullscreen","link":"#app-fullscreen","children":[]},{"level":3,"title":"指针锁定 app_pointer_lock","slug":"app-pointer-lock","link":"#app-pointer-lock","children":[]},{"level":3,"title":"设置背景 app_set_background","slug":"app-set-background","link":"#app-set-background","children":[]}]}],"relativePath":"block3d/blocks-reference/scenes.md"}'),n={name:"block3d/blocks-reference/scenes.md"},r=a('<h1 id="场景-scenes" tabindex="-1">场景 Scenes <a class="header-anchor" href="#场景-scenes" aria-hidden="true">#</a></h1><p>这类拼图用于加载资产、创建环境、控制场景属性。</p><nav class="table-of-contents"><ul><li><a href="#场景">场景</a><ul><li><a href="#scene-properties-accessors">场景属性 scene_properties_accessors</a></li></ul></li><li><a href="#环境">环境</a><ul><li><a href="#scene-create-easy-environment">简易环境 scene_create_easy_environment</a></li><li><a href="#scene-create-default-environment">创建环境 scene_create_default_environment</a></li><li><a href="#scene-update-default-environment">更新环境 scene_update_default_environment</a></li><li><a href="#scene-get-environment-prop">环境属性 scene_get_environment_prop</a></li></ul></li><li><a href="#资产">资产</a><ul><li><a href="#scene-create-loading-screen">创建加载界面 scene_create_loading_screen</a></li><li><a href="#scene-assets-manager">资产管理器 scene_assets_manager</a></li><li><a href="#scene-create-loading-task">创建加载任务 scene_create_loading_task</a></li><li><a href="#scene-get-loaded-from-task">获取资产 scene_get_loaded_from_task</a></li><li><a href="#scene-asset-container-methods">容器方法 scene_asset_container_methods</a></li></ul></li><li><a href="#应用">应用</a><ul><li><a href="#app-fullscreen">全屏 app_fullscreen</a></li><li><a href="#app-pointer-lock">指针锁定 app_pointer_lock</a></li><li><a href="#app-set-background">设置背景 app_set_background</a></li></ul></li></ul></nav><h2 id="场景" tabindex="-1">场景 <a class="header-anchor" href="#场景" aria-hidden="true">#</a></h2><h3 id="scene-properties-accessors" tabindex="-1">场景属性 scene_properties_accessors <a class="header-anchor" href="#scene-properties-accessors" aria-hidden="true">#</a></h3><p>用于设置或获取场景属性或访问器。访问器是访问对象属性时触发的回调函数，用于设置或获取对象的内部数据，用法与属性相同，在拼图中表示为&quot;属性*&quot;。</p><p>属性：</p><ul><li>环境色 ambientColor - 定义用于模拟环境色的颜色，默认(0, 0, 0)</li><li>动画时间缩放 animationTimeScale - 设置或获取动画播放速度的统一缩放值</li><li>启用动画 animationsEnabled - 设置是否启用动画</li><li>启用音频 audioEnabled - 设置是否启用音频支持</li><li>背景色 clearColor - 定义颜色用于清除渲染缓存</li><li>启用碰撞 collisionsEnabled - 设置是否在当前场景中启用碰撞</li><li>默认光标 defaultCursor - 定义默认的HTML光标，默认为空</li><li>环境强度 environmentIntensity - 在所有PBR材质的环境强度。这会使IBL照明整体变暗或增强（反射和漫反射）。由于在大多数场景中，它们是相同的（多房间等除外），因此在此处设置比在所有材质中都更容易。</li><li>雾颜色 fogColor - 设置雾效颜色</li><li>雾强度 fogDensity - 设置雾效强度</li><li>雾终点 fogEnd - 设置雾效结束距离</li><li>雾起点 fogStart - 设置雾效开始距离</li><li>强制显示边界盒 forceShowBoundingBoxes - 设置是否渲染所有的边界盒</li><li>重力 gravity - 定义场景重力 (仅用于碰撞)</li><li>经过光标 hoverCursor - 定义HTML光标用于当经过交互元素时</li><li>启用镜头光晕 lensFlaresEnabled - 设置在当前场景中是否启用镜头光晕 lens flares</li><li>启用粒子 particlesEnabled - 设置在当前场景中是否启用粒子 particles</li><li>启用物理 physicsEnabled - 设置在当前场景中是否启用物理引擎 physic engines</li><li>启用后处理 postProcessesEnabled - 设置在当前场景中是否启用后处理 postprocesses</li><li>启用灯光探头 probesEnabled - 设置在当前场景中是否启用灯光探头 probes</li><li>启用精灵 spritesEnabled - 设置在当前场景中是否启用精灵 sprites</li><li>使用不依赖透明顺序 useOrderIndependentTransparency - 设置是否使用与顺序无关的透明度，尽管性能受到影响</li></ul><p>访问器：</p><ul><li>激活相机 activeCameras - 场景中所有的激活相机</li><li>环境贴图 environmentTexture - 用于所有PBR材质的反射纹理。因为在大多数情况下它们是共用的，所以在这里设置比在每个材质中分别设置都更方便。也可以在创建环境时设置它。</li><li>启用雾 fogEnabled - 设置是否在当前场景中启用雾效</li><li>雾模式 fogMode - 设置雾效模式0-无1-指数2-指数23-线性</li><li>启用灯光 lightsEnabled - 设置在当前场景中是否启用灯光 lights</li><li>启用阴影 shadowsEnabled - 设置在当前场景中是否启用阴影 shadows</li><li>启用骨骼 skeletonsEnabled - 设置在当前场景中是否启用骨骼 skeletons</li><li>启用纹理 texturesEnabled - 设置在当前场景中是否启用纹理 textures</li><li>使用右手坐标系 useRightHandedSystem - 设置或获取在当前场景中是否启用右手坐标系统Ω</li></ul><h2 id="环境" tabindex="-1">环境 <a class="header-anchor" href="#环境" aria-hidden="true">#</a></h2><h3 id="scene-create-easy-environment" tabindex="-1">简易环境 scene_create_easy_environment <a class="header-anchor" href="#scene-create-easy-environment" aria-hidden="true">#</a></h3><p>简易环境。用于快速创建环境。环境由天空盒和地面组成，可根据需要选择是否创建。</p><p>该拼图需要用到位于<code>项目路径/assets/texture</code>下的3张贴图，使用该拼图时要确保以下贴图存在：</p><ul><li>天空盒纹理 - assets/texture/backgroundSkybox.dds</li><li>地面纹理 - assets/texture/backgroundGround.png</li><li>环境贴图 - assets/texture/environment.dds</li></ul><h3 id="scene-create-default-environment" tabindex="-1">创建环境 scene_create_default_environment <a class="header-anchor" href="#scene-create-default-environment" aria-hidden="true">#</a></h3><p>创建环境。环境由天空盒和地面组成。</p><p><code>选项</code>接收一个对象参数，其中包括创建环境的属性，属性有：</p><ul><li>背景Y轴旋转backgroundYRotation - 背景沿场景的Y轴旋转。这有助于让场景的主光与背景对齐</li><li>镜头对比度cameraContrast - 场景对比度 默认1.6如果setupImageProcessing为true.</li><li>镜头曝光度cameraExposure - 场景曝光度 默认0.6如果setupImageProcessing为true.</li><li>创建地面createGround - 是否创建地面</li><li>创建天空盒createSkybox - 是否创建天空盒</li><li>启用地面反射enableGroundMirror - 创建镜面纹理结合到地面</li><li>启用地面阴影enableGroundShadow - 启用地面接收阴影</li><li>环境贴图environmentTexture - 场景中使用的环境贴图。可以是立方体纹理或者贴图地址，如果未指定纹理或地址，则从babylon远程服务器加载</li><li>地面颜色groundColor - 默认混入地面纹理的颜色 默认为clearColor</li><li>地面反射数量groundMirrorAmount - 指定地面镜面可见度</li><li>地面反射模糊粒度groundMirrorBlurKernel - 指定地面镜面模糊颗粒大小</li><li>地面反射衰减距离groundMirrorFallOffDistance - 指定地面镜面衰减距离。有助于减少反射大小</li><li>地面反射菲涅耳权重groundMirrorFresnelWeight - 指定地面镜面反射率权重。使用背景材质的标准权重来设置镜面的菲涅耳效应</li><li>地面反射大小比率groundMirrorSizeRatio - 指定地面镜面大小比率 默认0.3因为默认颗粒为64.</li><li>地面反射纹理类型groundMirrorTextureType - 指定地面镜面纹理类型</li><li>地面不透明度groundOpacity - 指定地面不透明度</li><li>地面阴影级别groundShadowLevel - 防止地面的阴影死黑</li><li>地面大小groundSize - 指定地面大小</li><li>地面纹理groundTexture - 用于地面的纹理。</li><li>地面Y轴偏移groundYBias - 指定一个地面垂直方向的偏移值，以确保物体与地面不会重叠</li><li>根位置rootPosition - 默认的根网络位置，如果autoSize不为true</li><li>创建图像处理setupImageProcessing - 在场景中创建图片后处理</li><li>自动大小sizeAuto - 自动计算适配场景的最佳元素尺寸</li><li>天空盒颜色skyboxColor - 默认混入天空纹理的颜色。默认为clearColor</li><li>天空盒大小skyboxSize - 指定天空盒大小</li><li>天空盒纹理skyboxTexture - 用于天空盒的纹理。</li><li>启用色调映射toneMappingEnabled - 指定在场景中是否启用toneMapping 默认true如果setupImageProcessing为true.</li></ul><p>获取选项拼图可以通过该拼图右键菜单<code>创建 选项</code>创建。</p><h3 id="scene-update-default-environment" tabindex="-1">更新环境 scene_update_default_environment <a class="header-anchor" href="#scene-update-default-environment" aria-hidden="true">#</a></h3><p>该拼图用于更新环境的参数，不会取代默认环境。参数与<a href="#scene-create-default-environment">scene_create_default_environment</a>相同。</p><h3 id="scene-get-environment-prop" tabindex="-1">环境属性 scene_get_environment_prop <a class="header-anchor" href="#scene-get-environment-prop" aria-hidden="true">#</a></h3><p>获取环境属性。包括以下属性：</p><ul><li>地面 ground - 获取地面网格</li><li>地面材质 groundMaterial - 获取地面材质</li><li>地面反射 groundMirror - 获取地面镜面</li><li>地面反射渲染列表 groundMirrorRenderList - 获取地面镜面渲染列表，以帮助在地面反射中添加网格</li><li>地面纹理 groundTexture - 获取地面纹理</li><li>根网格 rootMesh - 获取根网格</li><li>天空盒 skybox - 获取天空盒</li><li>天空盒材质 skyboxMaterial - 获取天空盒材质</li><li>天空盒纹理 skyboxTexture - 获取天空盒纹理</li></ul><h2 id="资产" tabindex="-1">资产 <a class="header-anchor" href="#资产" aria-hidden="true">#</a></h2><h3 id="scene-create-loading-screen" tabindex="-1">创建加载界面 scene_create_loading_screen <a class="header-anchor" href="#scene-create-loading-screen" aria-hidden="true">#</a></h3><p>创建一个在加载资产时显示的用户界面，该界面会在加载完成后自动销毁。该拼图用于<a href="#scene_assets_manager">资产管理器</a>拼图的<code>加载界面</code>参数。</p><p><code>选项</code>参数接收一个对象，包含控制加载器外观的键值：</p><ul><li>背景</li><li>logo图片 - base64编码图片，可通过<code>菜单-工具-Base64编码器</code>获取上传图片的base64编码</li><li>进度条背景</li><li>进度条边框</li><li>进度条高度</li></ul><p>也可以通过修改项目文件夹下<code>assets/css/index.css</code>样式文件实现同样的效果，此时<code>选项</code>不需要传递参数。相关的类名有：</p><ul><li>.preloader-background - 加载屏背景</li><li>.preloader-container - 加载器容器，控制大小</li><li>.preloader-bar - 进度条</li><li>.preloader-logo - LOGO</li></ul><h3 id="scene-assets-manager" tabindex="-1">资产管理器 scene_assets_manager <a class="header-anchor" href="#scene-assets-manager" aria-hidden="true">#</a></h3><p>用于加载各种类型的资产。</p><p>参数：</p><ul><li>加载界面 - 为空表示不使用加载界面</li><li>加载 - 在该插槽中使用<a href="#scene_create_loading_task">创建加载任务scene_create_loading_task</a>拼图加载资产</li><li>加载中 - 资产加载进度。点击齿轮图标，选中“启用加载中回调”开启，默认关闭</li><li>完成 - 资产加载完成，但未渲染</li></ul><h3 id="scene-create-loading-task" tabindex="-1">创建加载任务 scene_create_loading_task <a class="header-anchor" href="#scene-create-loading-task" aria-hidden="true">#</a></h3><p>用于创建加载任务。</p><p>资产类型：</p><ul><li>网格Mesh - 网格，3D场景，支持<code>.babylon</code> <code>.glTF/.glb</code> <code>.obj</code> <code>.stl</code></li><li>容器Container - 容器可以用来管理一个资产列表（如节点、摄像机、灯光、网格等）。这些资产与场景依然关联，但不被渲染。可以把容器想象成一个实体的水池</li><li>文本文件TextFile - <code>.txt</code>文本文件</li><li>二进制文件BinaryFile - 二进制文件，如<code>.json</code> <code>.mp3</code></li><li>图片Image - 加载<code>HTMLImage</code></li><li>纹理Texture - 加载普通贴图</li><li>立方体纹理CubeTexture - 加载立方体贴图</li><li>HDR立方体纹理HDRCubeTexture - 加载HDR立方体贴图</li><li>等距圆柱立方体纹理EquiRectangularCubeTexture - 加载等矩柱状立方体贴图</li></ul><h3 id="scene-get-loaded-from-task" tabindex="-1">获取资产 scene_get_loaded_from_task <a class="header-anchor" href="#scene-get-loaded-from-task" aria-hidden="true">#</a></h3><p>用于在加载任务成功后获取加载的资产。此拼图需要在<a href="#scene-assets-manager">资产管理器scene_assets_manager</a>拼图的<code>完成</code>插槽中运行。</p><p>返回结果：</p><ul><li>网格 - 加载的网格</li><li>容器 - 加载的容器</li><li>动画组 - 加载的动画组</li><li>骨骼 - 加载的骨骼</li><li>文本 - 加载的文本内容</li><li>json - 加载的json</li><li>数据 - 从二进制文件加载的数据</li><li>图片 - HTML图片</li><li>纹理 - 加载的纹理</li></ul><h3 id="scene-asset-container-methods" tabindex="-1">容器方法 scene_asset_container_methods <a class="header-anchor" href="#scene-asset-container-methods" aria-hidden="true">#</a></h3><p>该拼图包含加载容器任务的一些方法：</p><ul><li>全部移入场景: 将容器中的全部资产添加到场景</li><li>全部移出场景: 移除包含在场景中的所有资产并将它们添加到容器中</li><li>实例化到场景: 实例化或克隆所有的网格并将新的网格添加到场景中。骨架和动画组都将被克隆</li><li>全部清出场景: 将容器中的所有资产从场景中移除</li></ul><h2 id="应用" tabindex="-1">应用 <a class="header-anchor" href="#应用" aria-hidden="true">#</a></h2><h3 id="app-fullscreen" tabindex="-1">全屏 app_fullscreen <a class="header-anchor" href="#app-fullscreen" aria-hidden="true">#</a></h3><p>是否全屏。勾选<code>指针锁定</code>会锁定鼠标。</p><h3 id="app-pointer-lock" tabindex="-1">指针锁定 app_pointer_lock <a class="header-anchor" href="#app-pointer-lock" aria-hidden="true">#</a></h3><p>是否锁定鼠标。</p><h3 id="app-set-background" tabindex="-1">设置背景 app_set_background <a class="header-anchor" href="#app-set-background" aria-hidden="true">#</a></h3><p>设置应用程序的背景。值可以是CSS中设置<code>background</code>属性的任意有效值。</p><p>注意：使用此拼图时，不能同时使用天空盒背景。</p>',55),s=[r];function t(o,c,d,p,u,h){return i(),l("div",null,s)}const f=e(n,[["render",t]]);export{g as __pageData,f as default};
